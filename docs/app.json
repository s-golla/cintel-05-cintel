[{"name": "app.py", "content": "\n# Arctic Climate Dashboard - PyShiny Express Version\n# --------------------------------------------------\n# This dashboard provides live monitoring of Arctic temperature and humidity data.\n# It features a modern UI, value boxes, interactive charts, and a sidebar with resources.\n# Technologies: PyShiny Express, pandas, plotly, Font Awesome icons, shinywidgets.\n\n# ----------------------\n# Imports\n# ----------------------\n\nfrom shiny import reactive, render\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg \nimport plotly.graph_objs as go\n\n\n# ----------------------\n# Constants and reactive data setup\n# ----------------------\n\n\n# Interval (seconds) for live data updates\nUPDATE_INTERVAL_SECS: int = 10\n# Number of recent readings to keep in memory\nDEQUE_SIZE: int = 5\n# Wrapper for the deque storing recent readings\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n\n# ----------------------\n# Reactive calculation: data engine\n# ----------------------\n\n@reactive.calc()\ndef reactive_calc_combined():\n    \"\"\"\n    Core data engine for the dashboard.\n    - Triggers every UPDATE_INTERVAL_SECS seconds to simulate new readings.\n    - Appends new temperature/humidity/timestamp to a deque.\n    - Returns: (deque, pandas DataFrame, latest reading dict)\n    \"\"\"\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Simulate Arctic climate readings\n    temperature = round(random.uniform(-30, -25), 1)  # Temperature in \u00b0C\n    humidity = round(random.uniform(70, 95), 1)       # Humidity in %\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\n        \"temperature\": temperature,\n        \"humidity\": humidity,\n        \"timestamp\": timestamp\n    }\n\n    # Append new reading to deque\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Prepare outputs\n    deque_snapshot = reactive_value_wrapper.get()\n    df = pd.DataFrame(deque_snapshot)\n    latest_dictionary_entry = new_dictionary_entry\n    return deque_snapshot, df, latest_dictionary_entry\n\n\n# ----------------------\n# Layout and sidebar section\n# ----------------------\n\nui.page_opts(title=\"Polar Climate Dashboard\", fillable=True)\n# Sidebar: App title, description, and resource links\nwith ui.sidebar(open=\"open\"):\n    ui.h2(ui.HTML(f\"<span style='color:#00BFFF'>{icon_svg('snowflake', style='solid')}</span> Arctic Research Center\"), class_=\"text-center\")\n    ui.p(\"Live monitoring of Arctic temperature and humidity.\", class_=\"text-center\")\n    ui.hr()\n    ui.h6(ui.HTML(f\"<span style='color:#FF9800'>{icon_svg('book-open', style='solid')}</span> Resources:\"))\n    ui.a(\"GitHub Repository\", href=\"https://github.com/s-golla/cintel-05-cintel\", target=\"_blank\")\n    ui.a(\"PyShiny Documentation\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\"PyShiny Express Blog\", href=\"https://shiny.posit.co/blog/posts/shiny-express/\", target=\"_blank\")\n\n\n# ----------------------\n# Value boxes: live readings\n# ----------------------\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"temperature-high\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n        # Temperature value box\n        \"Temperature\"\n        @render.text\n        def render_temperature():\n            \"\"\"Return latest temperature value as string (\u00b0C)\"\"\"\n            _, _, latest = reactive_calc_combined()\n            return f\"{latest['temperature']} \u00b0C\"\n        \"Live Arctic Temperature\"\n\n    with ui.value_box(\n        showcase=icon_svg(\"droplet\"),\n        theme=\"bg-gradient-green-cyan\",\n    ):\n        # Humidity value box\n        \"Humidity\"\n        @render.text\n        def render_humidity():\n            \"\"\"Return latest humidity value as string (%)\"\"\"\n            _, _, latest = reactive_calc_combined()\n            return f\"{latest['humidity']} %\"\n        \"Live Arctic Humidity\"\n\n    with ui.value_box(\n        showcase=icon_svg(\"clock\"),\n        theme=\"bg-gradient-gray-dark\",\n    ):\n        # Last Update value box\n        ui.HTML(\"<span style='font-weight:bold; font-size:1.3em;'>Last Update</span>\")\n        @render.ui\n        def render_timestamp():\n            \"\"\"Return latest timestamp value as styled HTML\"\"\"\n            _, _, latest = reactive_calc_combined()\n            return ui.HTML(f\"<span style='font-size:0.75em; color:#FF9800; font-family:monospace;'>{latest['timestamp']}</span>\")\n        \"Last Update Time\"\n\n\n# ----------------------\n# Data table: recent readings\n# ----------------------\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Recent Climate Data Table\")\n    @render.data_frame\n    def render_data_table():\n        \"\"\"Return recent readings as a pandas DataGrid table\"\"\"\n        _, df, _ = reactive_calc_combined()\n        pd.set_option('display.width', None)\n        return render.DataGrid(df, width=\"100%\")\n    \n\n# ----------------------\n# Charts: temperature, humidity, distribution\n# ----------------------\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Temperature Trend\")\n        @render_plotly\n        def render_temperature_chart():\n            \"\"\"Return temperature trend chart (Plotly) with trend line\"\"\"\n            _, df, _ = reactive_calc_combined()\n            if not df.empty:\n                df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n                fig = go.Figure()\n                # Main temperature line: bold, gradient blue\n                fig.add_trace(go.Scatter(\n                    x=df[\"timestamp\"],\n                    y=df[\"temperature\"],\n                    mode=\"lines+markers\",\n                    name=\"Temperature\",\n                    line=dict(color=\"#1976D2\", width=4),\n                    marker=dict(color=\"#64B5F6\", size=8, symbol=\"circle\"),\n                ))\n                # Add trend line (magenta, dotted)\n                if len(df) >= 2:\n                    x_vals = list(range(len(df)))\n                    slope, intercept, *_ = stats.linregress(x_vals, df[\"temperature\"])\n                    trend = [slope * x + intercept for x in x_vals]\n                    fig.add_trace(go.Scatter(\n                        x=df[\"timestamp\"],\n                        y=trend,\n                        mode=\"lines\",\n                        name=\"Trend\",\n                        line=dict(color=\"#D81B60\", dash=\"dot\", width=3)\n                    ))\n                fig.update_layout(\n                    xaxis_title=\"Time\",\n                    yaxis_title=\"Temperature (\u00b0C)\",\n                    plot_bgcolor=\"#F3F6FB\",\n                    paper_bgcolor=\"#E3EAF2\",\n                    font=dict(color=\"#212121\"),\n                    title_font=dict(size=22, color=\"#1976D2\"),\n                    legend=dict(bgcolor=\"#E3EAF2\", bordercolor=\"#BDBDBD\", borderwidth=1),\n                    transition=dict(duration=500)\n                )\n                return fig\n\n    with ui.card():\n        ui.card_header(\"Humidity Trend\")\n        @render_plotly\n        def render_humidity_chart():\n            \"\"\"Return humidity trend chart (Plotly) with trend line\"\"\"\n            _, df, _ = reactive_calc_combined()\n            if not df.empty:\n                df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n                fig = go.Figure()\n                # Main humidity line: bold, teal\n                fig.add_trace(go.Scatter(\n                    x=df[\"timestamp\"],\n                    y=df[\"humidity\"],\n                    mode=\"lines+markers\",\n                    name=\"Humidity\",\n                    line=dict(color=\"#00897B\", width=4),\n                    marker=dict(color=\"#4DD0E1\", size=8, symbol=\"diamond\"),\n                ))\n                # Add trend line (orange, dotted)\n                if len(df) >= 2:\n                    x_vals = list(range(len(df)))\n                    slope, intercept, *_ = stats.linregress(x_vals, df[\"humidity\"])\n                    trend = [slope * x + intercept for x in x_vals]\n                    fig.add_trace(go.Scatter(\n                        x=df[\"timestamp\"],\n                        y=trend,\n                        mode=\"lines\",\n                        name=\"Trend\",\n                        line=dict(color=\"#FFB300\", dash=\"dot\", width=3)\n                    ))\n                fig.update_layout(\n                    xaxis_title=\"Time\",\n                    yaxis_title=\"Humidity (%)\",\n                    plot_bgcolor=\"#F3F6FB\",\n                    paper_bgcolor=\"#E3EAF2\",\n                    font=dict(color=\"#212121\"),\n                    title_font=dict(size=22, color=\"#00897B\"),\n                    legend=dict(bgcolor=\"#E3EAF2\", bordercolor=\"#BDBDBD\", borderwidth=1),\n                    transition=dict(duration=500)\n                )\n                return fig\n\n    with ui.card():\n        ui.card_header(\"Recent Temperature Distribution\")\n        @render_plotly\n        def render_temperature_distribution():\n            \"\"\"Return histogram of recent temperature readings (Plotly)\"\"\"\n            _, df, _ = reactive_calc_combined()\n            if not df.empty:\n                fig = px.histogram(\n                    df,\n                    x=\"temperature\",\n                    nbins=7,\n                    title=\"Recent Temperature Histogram\",\n                    color_discrete_sequence=[\"#1976D2\"],\n                    opacity=0.85,\n                )\n                fig.update_traces(marker_line_color=\"#D81B60\", marker_line_width=2)\n                fig.update_layout(\n                    xaxis_title=\"Temperature (\u00b0C)\",\n                    yaxis_title=\"Frequency\",\n                    plot_bgcolor=\"#F3F6FB\",\n                    paper_bgcolor=\"#E3EAF2\",\n                    font=dict(color=\"#212121\"),\n                    title_font=dict(size=22, color=\"#1976D2\"),\n                    legend=dict(bgcolor=\"#E3EAF2\", bordercolor=\"#BDBDBD\", borderwidth=1),\n                    transition=dict(duration=500),\n                )\n                return fig", "type": "text"}]